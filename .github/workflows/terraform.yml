trigger:
- main  # Trigger pipeline on changes to the main branch

variables:
  terraformVersion: '1.8.4'
  azureSubscription: '<YOUR_AZURE_SERVICE_CONNECTION>'
  tfvarsFile: 'dev.tfvars'
  aksWorkingDirectory: 'aks'

stages:

# ===================== CI STAGES =====================

- stage: Build
  displayName: "Build Application"
  jobs:
  - job: BuildJob
    displayName: "Build and Package Application"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: UseNode@2
      inputs:
        version: '16.x'
      displayName: "Setup Node.js"
    - script: |
        npm install
        npm run build
      displayName: "Build Application"

- stage: Test
  displayName: "Run Unit Tests"
  dependsOn: Build
  jobs:
  - job: TestJob
    displayName: "Execute Unit Tests"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - script: |
        npm run test
      displayName: "Run Tests"
    - task: PublishTestResults@2
      inputs:
        testResultsFiles: '**/test-results.xml'
      displayName: "Publish Test Results"

# ===================== CD STAGES =====================

- stage: Provision
  displayName: "Provision AKS Cluster"
  dependsOn: Test
  jobs:
  - job: ProvisionJob
    displayName: "Terraform - Provision AKS"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: AzureCLI@2
      inputs:
        azureSubscription: $(azureSubscription)
      displayName: "Login to Azure"
    - script: |
        curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
        echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
        sudo apt update && sudo apt install -y terraform=$(terraformVersion)
      displayName: "Install Terraform"
    - script: |
        terraform init
        terraform plan -var-file=$(tfvarsFile)
        terraform apply -var-file=$(tfvarsFile) -auto-approve
      workingDirectory: $(aksWorkingDirectory)
      displayName: "Terraform - Apply AKS"

- stage: Deploy
  displayName: "Deploy Application to AKS"
  dependsOn: Provision
  jobs:
  - job: DeployJob
    displayName: "Deploy Application"
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: Kubernetes@1
      inputs:
        connectionType: 'Azure Resource Manager'
        azureSubscription: $(azureSubscription)
        azureResourceGroup: '<YOUR_RESOURCE_GROUP>'
        kubernetesCluster: '<YOUR_AKS_CLUSTER>'
        namespace: 'default'
      displayName: "Connect to AKS"
    - script: |
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml
      displayName: "Deploy to AKS"
